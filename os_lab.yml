## Run as
## TF_STATE=./tf_vmware/terraform.tfstate; ansible-playbook os_lab.yml --extra-vars "firstrun=true" 
## When not using a vault add: "--ask-vault-pass"


---

# - hosts: localhost
#   tasks:
#   - include_vars: .vault.yml

## Servers uitrollen
## Mag uit staan omdat we uitrollen met TF
#   roles:
#     - vmware-guest

# - hosts: localhost
#   tasks:
#   - debug: 'var=groups'



## install python 2
- hosts: all
  gather_facts: False

  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
    when: firstrun is defined

#######################################################################
## common stuff
#######################################################################
- hosts: all
  gather_facts: True
  tasks:
  - name: "Build hosts file"
    lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].ansible_default_ipv4.address }} {{item}} {{ hostvars[item].ansible_hostname }} " state=present
    with_items: 
      - "{{ groups['all'] }}"
    when: firstrun is defined

  - name: add-apt-repository
    shell: add-apt-repository cloud-archive:rocky -y; apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5EDB1B62EC4926EA
    when: firstrun is defined

#  - name: add-apt-repository rocky
#    apt_repository:
#      repo: cloud-archive:rocky

  - name: dist-upgrade
    apt:
      upgrade: dist
      update_cache: yes
      dpkg_options: 'force-confold,force-confdef'
    when: firstrun is defined
    ##retry so we can user forking
    register: apt_result
    retries: 5 
    until: apt_result is success

  - name: ensure common packages are installed
    apt:
      pkg:
        - chrony
        - software-properties-common
        - python-openstackclient 
      state: present
      update_cache: yes
    ##retry so we can user forking
    register: apt_result
    retries: 5 
    until: apt_result is success

  - name: configure chrony
    lineinfile:
      path=/etc/chrony/chrony.conf
      regexp='^allow'
      line='allow 10.0.0.0/24'
    notify: restart-chrony



#######################################################################
## Control nodes
#######################################################################
- hosts: control
  tasks:
  - name: ensure certain packages are installed on control
    apt:
      pkg:
        - python-pymysql
        - python-memcache
        - memcached
        - etcd
        - apache2
        - libapache2-mod-wsgi
      state: present
      update_cache: yes

## MySQL
  - name: install mariadb
    apt:  pkg=mariadb-server state=present update_cache=yes
    register: mariadb
    tags: database

  - name: template 99-openstack.cnf
    template:
      src=files/99-openstack.cnf.j2
      dest=/etc/mysql/mariadb.conf.d/99-openstack.cnf
      backup=yes
    notify: restart-mysql
    when: mariadb.changed
    tags: database

  - name: create databases
    mysql_db:
      config_file=/etc/mysql/debian.cnf
      name={{ item }}
    with_items: "{{mysql_databases}}"
    tags: database

  - name: create users
    mysql_user:
      config_file=/etc/mysql/debian.cnf
      name={{item}}
      host='%'
      password="{{ DATABASE_PASS }}"
      priv='{{item}}.*:ALL'
    with_items: "{{mysql_databases}}"
    tags: database

## RabbitMQ
  - name: ensure certain packages are installed
    apt:  pkg=rabbitmq-server state=present update_cache=yes
    register: rabbitmq


  - name: configure rabbitmq
    shell: rabbitmqctl add_user openstack {{RABBIT_PASS}}; rabbitmqctl set_permissions openstack ".*" ".*" ".*"
    when: rabbitmq.changed

## Memcached
  - name: template memcached.conf
    template:
      src=files/memcached.conf.j2
      dest=/etc/memcached.conf
      backup=yes
    notify: restart-memcached

## ETCD
  - name: create etcd config folder
    file:
      path=/etc/etcd
      state=directory
      owner=etcd
      group=etcd

  - name: template etcd.conf.yml
    template:
      src=files/etcd.conf.yml.j2
      dest=/etc/etcd/etcd.conf.yml
      backup=yes
    notify: restart-etcd

## Keystone
  - name: install keystone
    apt:  pkg=keystone state=present update_cache=yes
    register: keystone
    tags: keystone

  - name: template keystone.conf.yml
    template:
      src=files/keystone.conf.j2
      dest=/etc/keystone/keystone.conf
      backup=yes
    notify: restart-keystone
    tags: keystone

  - name: chown /var/log/keystone directory
    file:
      path: /var/log/keystone
      state: directory
      owner: keystone
      group: syslog
      mode: 0775
    when: keystone.changed

  - name: retreive keystone table count
    shell: mysql -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'keystone';" -B  -N
    register: keystonetablecount
    tags: keystone

  - name: Populate the Identity service database
    shell: su -s /bin/sh -c "keystone-manage db_sync" keystone
    when: keystonetablecount.stdout|int < 10
    tags: keystone

  - name: Initialize Fernet key repositories
    shell: |
      keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
      keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
    when: keystone.changed
    register: fernet
    tags: keystone

  - name: Bootstrap the Identity service
    shell: |
      keystone-manage bootstrap --bootstrap-password {{ ADMIN_PASS }} \
       --bootstrap-admin-url http://{{ hostvars[item].ansible_hostname }}:5000/v3/ \
       --bootstrap-internal-url http://{{ hostvars[item].ansible_hostname }}:5000/v3/ \
       --bootstrap-public-url http://{{ hostvars[item].ansible_hostname }}:5000/v3/ \
       --bootstrap-region-id RegionOne; exit 0
    become: yes
    become_user: root
    with_items: 
      - "{{ groups['control'] }}"
    when: fernet.changed
    tags: keystone

  - name: template adminrc
    template:
      src=files/adminrc.j2
      dest={{item}}
      backup=yes
    with_items:
      - /root/.adminrc
      - /home/ubuntu/.adminrc
    tags: keystone

  - name: create domain project user and roles
    block:
      - shell: . ~/.adminrc && openstack domain create --description "An Example Domain" example; exit 0
      - shell: . ~/.adminrc && openstack project create --domain default --description "Service Project" service; exit 0
      - shell: . ~/.adminrc && openstack project create --domain default --description "Demo Project" myproject; exit 0
      - shell: . ~/.adminrc && openstack user create --domain default --password {{my_openstack_pass}} myuser; exit 0
      - shell: . ~/.adminrc && openstack role create myrole; exit 0
      - shell: . ~/.adminrc && openstack role add --project myproject --user myuser myrole; exit 0
    when: fernet.changed
    tags: keystone

## Glance
  - name: prep for glance
    block:
      - shell: . ~/.adminrc && openstack user create --domain default --password {{GLANCE_PASS}} glance; exit 0
      - shell: . ~/.adminrc && openstack role add --project service --user glance admin; exit 0
      - shell: . ~/.adminrc && openstack service create --name glance --description "OpenStack Image" image; exit 0
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne image public http://os-lab-control:9292; exit 0
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne image internal http://os-lab-control:9292; exit 0
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne image admin http://os-lab-control:9292; exit 0
    when: firstrun is defined
    tags: glance

  - name: install glance
    block:
      - apt:  pkg=glance state=present update_cache=yes
      - template:
          src=files/{{item}}.j2
          dest=/etc/glance/{{item}}
          backup=yes
        with_items:
          - glance-api.conf
          - glance-registry.conf
        notify: 
          - restart-glance-api
          - restart-glance-registry
      - shell: mysql -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'glance';" -B  -N
        register: glancetablecount
      - name: Populate database
        shell: su -s /bin/sh -c "glance-manage db_sync" glance
        when: glancetablecount.stdout|int < 10
    tags: glance

## Compute controller
  - name: prep for nova
    block:
      - shell: . ~/.adminrc && openstack user create --domain default --password {{NOVA_PASS}} nova
      - shell: . ~/.adminrc && openstack role add --project service --user nova admin
      - shell: . ~/.adminrc && openstack service create --name nova --description "OpenStack Compute" compute
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne compute public http://os-lab-control:8774/v2.1
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne compute internal http://os-lab-control:8774/v2.1
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne compute admin http://os-lab-control:8774/v2.1
      - shell: . ~/.adminrc && openstack user create --domain default --password {{PLACEMENT_PASS}} placement
      - shell: . ~/.adminrc && openstack role add --project service --user placement admin
      - shell: . ~/.adminrc && openstack service create --name placement --description "Placement API" placement
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne placement public http://os-lab-control:8778
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne placement internal http://os-lab-control:8778
      - shell: . ~/.adminrc && openstack endpoint create --region RegionOne placement admin http://os-lab-control:8778
    when: firstrun is defined
    tags: nova

  - name: install nova
    block:
      - name: install nova packages
        apt:  pkg={{nova_packages}} state=present update_cache=yes
      - name: configure nova
        template:
          src=files/{{item}}.j2
          dest=/etc/nova/{{item}}
          backup=yes
        with_items:
          - nova.conf
        notify: 
          - restart-nova-api
          - restart-nova-conductor
          - restart-nova-scheduler
          - restart-nova-novncproxy
      - name: count nova tables
        shell: mysql -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'nova_api';" -B  -N
        register: novaapitablecount
      - name: Populate the Identity service database
        shell: su -s /bin/sh -c "nova-manage api_db sync" nova
        when: novaapitablecount.stdout|int < 10
      - name: count nova tables
        shell: mysql -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'nova';" -B  -N
        register: novatablecount
      - name: stop nova before populating database
        service:
          name: "{{item}}"
          state: stopped
        with_items:
          - nova-api
          - nova-conductor
          - nova-scheduler
          - nova-novncproxy
        when: novatablecount.stdout|int < 10
      - name: Populate databases
        shell: |
          su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova
          su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova 109e1d4b-536a-40d0-83c6-5f121b82b650
          su -s /bin/sh -c "nova-manage db sync" nova
        when: novatablecount.stdout|int < 10
        notify: 
          - restart-nova-api
          - restart-nova-conductor
          - restart-nova-scheduler
          - restart-nova-novncproxy
    tags: nova

  handlers:
  - name: restart-mysql
    service: 
      name=mysql 
      state=restarted

  - name: restart-memcached
    service: 
      name=memcached
      state=restarted

  - name: restart-etcd
    service: 
      name=etcd
      state=restarted

  - name: restart-chrony
    service:
      name=chrony
      state=restarted

  - name: restart-keystone
    service: 
      name=keystone
      state=restarted

  - name: restart-glance-registry
    service: 
      name=glance-registry
      state=restarted

  - name: restart-glance-api
    service: 
      name=glance-api
      state=restarted

  - name: restart-nova-api
    service: 
      name="nova-api"
      state=restarted

  - name: restart-nova-conductor
    service: 
      name="nova-conductor"
      state=restarted

  - name: restart-nova-scheduler
    service: 
      name="nova-scheduler"
      state=restarted

  - name: restart-nova-novncproxy
    service: 
      name="nova-novncproxy"
      state=restarted


#######################################################################
## Compute nodes
#######################################################################

- hosts: compute
  tasks:
    - name: install nova packages
      apt:  pkg={{nova_packages}} state=present update_cache=yes
      tags: nova-compute

    - name: configure nova
      template:
        src=files/nova.conf.j2
        dest=/etc/nova/nova.conf
        backup=yes
      notify: restart-nova-compute
      tags: nova-compute
      register: novacompute

    - name: configure nova-compute
      template:
        src=files/nova-compute.conf.j2
        dest=/etc/nova/nova-compute.conf
        backup=yes
      notify: restart-nova-compute
      tags: nova-compute
      register: novacompute

  handlers:
  - name: restart-nova-compute
    service: 
      name=nova-compute
      state=restarted

- hosts: control
  tasks:
    - name: add compute node to cell database
      shell: . ~/.adminrc && su -s /bin/sh -c "nova-manage cell_v2 discover_hosts --verbose" nova; exit 0
      when: novacompute.changed



